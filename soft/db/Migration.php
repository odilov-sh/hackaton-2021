<?phpnamespace soft\db;use soft\helpers\ArrayHelper;use yii\db\Schema;use yii\helpers\StringHelper;/** * Migration to create tables and foreign keys. * This migration supports multilingual attributes. * Primary key ('id'), author ('user_id') and timestamp attributes will be automatically generated * * @property mixed $baseTableName * @property-read bool $isUsedTablePrefix * @property mixed $langTableName * @property mixed $baseLangTableName * @property-read array $attributes * @property array $langTableAttributes * @property-read bool $isMultilingual */class Migration extends \yii\db\Migration{    /**     * @var string $tableName - Jadval nomi     * NOTE! jadval nomini yozishda table prefixdan foydalanmang, shunchaki jadval nomini yozing.     * masalan 'product'.     * Agar $this->useTablePrefix qiymati true ga teng bo'lsa, prefix avtomatik generatsiya qilinadi     *    masalan - {{%product}}     */    public $tableName;    public $primaryKey = 'id';    /**     * @var string Primary key type     * @see Schema::TYPE_PK     * @see Schema::TYPE_UPK     * @see Schema::TYPE_BIGPK     * @see Schema::TYPE_UBIGPK     */    public $primaryKeyType = Schema::TYPE_UPK;    public $tableOptions;    public $timestamp = false;    public $createdAtAttribute = 'created_at';    public $updatedAtAttribute = 'updated_at';    public $blameable = false;    public $createdByAttribute = 'created_by';    public $updatedByAttribute = 'updated_by';    public $softDelete = false;    public $multilingiualAttributes = [];    /**     * @var array $foreignKeys - Foreign Keys     * usage: $this->foreignKeys = [     *    [     * 'name' => 'name', // if not set, it will be automatically generated     * 'table' => 'tableName' // defaults to $this->tableName     * 'columns' => 'category_id',     * 'refTable' => 'category',     * 'refColumns' => 'id', // defaults to 'id'     * 'delete' => 'CASCADE',    // defaults to 'CASCADE'     * 'update' => 'CASCADE',    // defaults to 'CASCADE'     *    ],     *    [...],     *    [...],     * ];     *     * @see [[Migation::addForeignKey() ]]     */    public $foreignKeys = [];    private $_langTableName;    private $_baseTableName;    private $_baseLangTableName;    private $_attributes = [];    /**     * Attributes for multlingual table     * @var array     */    private $_langTableAttributes = [];    /**     * @inheritdoc     */    public function init()    {        $this->generateTableNames();        $this->generateAttributes();    }    //<editor-fold desc="Table names" defaultstate="collapsed">    /**     * Generates base table name and multilingual table name     */    public function generateTableNames()    {        $baseTableName = $this->clearTablePrefix($this->tableName);        $this->baseTableName = $baseTableName;        if ($this->isMultilingual) {            $baseLangTableName = $baseTableName . '_lang';            $this->baseLangTableName = $baseLangTableName;            if ($this->isUsedTablePrefix) {                $this->langTableName = "{{%$baseLangTableName}}";            } else {                $this->langTableName = $baseLangTableName;            }        }    }    /**     * Get original table name without table prefix     * Example: if $tableName == '{{%product}}', result will be 'product'     * @return  string original table name     * @var string $tableName table name     */    public function clearTablePrefix(string $tableName)    {        if (StringHelper::endsWith($tableName, '}}')) {            return StringHelper::byteSubstr($tableName, 3, strlen($tableName) - 5);        }        return $tableName;    }    /**     * @return bool     */    public function getIsMultilingual()    {        return !empty($this->multilingiualAttributes);    }    /**     * @return bool     */    public function getIsUsedTablePrefix()    {        return StringHelper::endsWith($this->tableName, '}}');    }    //</editor-fold>    /**     * @return array     */    public function attributes()    {        return [];    }    public function generateAttributes()    {        if ($this->primaryKey != false) {            $this->addAttribute($this->primaryKey, $this->primaryKeyType);        }        foreach ($this->attributes() as $attribute => $type) {            $this->addAttribute($attribute, $type);        }        if ($this->blameable) {            $this->addAttribute($this->createdByAttribute, $this->integer());            $this->foreignKeys[] = [                'name' => $this->baseTableName . '_created_by_to_user_table',                'columns' => $this->createdByAttribute,                'refTable' => 'user',                'delete' => 'SET NULL',                'update' => 'CASCADE',            ];            $this->addAttribute('updated_by', $this->integer());            $this->foreignKeys[] = [                'name' => $this->baseTableName . '_updated_by_to_user_table',                'columns' => $this->updatedByAttribute,                'refTable' => 'user',                'delete' => 'SET NULL',                'update' => 'CASCADE',            ];        }        if ($this->softDelete) {            $this->addAttribute('is_deleted', $this->boolean()->defaultValue(false));            $this->addAttribute('deleted_at', $this->integer());            $this->addAttribute('deleted_by', $this->integer());            $this->foreignKeys[] = [                'name' => $this->baseTableName . '_deleted_by_to_user_table',                'columns' => 'deleted_by',                'refTable' => 'user',                'delete' => 'NO ACTION',                'update' => 'CASCADE',            ];        }        if ($this->timestamp) {            $this->addAttribute($this->createdAtAttribute, $this->integer());            $this->addAttribute($this->updatedAtAttribute, $this->integer());        }        if ($this->isMultilingual) {            $this->generateLangTableAttributes();        }    }    public function safeUp()    {        $this->createTable($this->tableName, $this->attributes, $this->tableOptions);        if ($this->isMultilingual) {            $this->createLangTable();        }        $this->addForeignKeys();    }    /**     * Creates Lang Table     */    public function createLangTable()    {        $this->createTable($this->langTableName, $this->langTableAttributes, $this->tableOptions);    }    /**     * Add foreign keys     * @throws \Exception     */    public function addForeignKeys()    {        foreach ($this->foreignKeys as $key) {            $table = ArrayHelper::getValue($key, 'table', $this->tableName);            $columns = ArrayHelper::getValue($key, 'columns');            $refTable = ArrayHelper::getValue($key, 'refTable');            $refColumns = ArrayHelper::getValue($key, 'refColumns', 'id');            $delete = ArrayHelper::getValue($key, 'delete', 'CASCADE');            $update = ArrayHelper::getValue($key, 'update', 'CASCADE');            $name = ArrayHelper::getValue($key, 'name');            if ($name == null) {                $name = $this->generateForeignKeyConstraintName($refTable, $columns);            }            $this->createIndex('idx_' . $name, $table, $columns);            $this->addForeignKey('fk_' . $name, $table, $columns, $refTable, $refColumns, $delete, $update);        }    }    /**     * @param $refTable     * @param $columns     * @return string     */    private function generateForeignKeyConstraintName($refTable, $columns)    {        $column = is_array($columns) ? $columns[0] : $columns;        return $this->baseTableName . "_" . $column . "_" . $this->clearTablePrefix($refTable);    }    /**     * @inheritdoc     */    public function safeDown()    {        foreach ($this->foreignKeys as $key) {            $table = ArrayHelper::getValue($key, 'table', $this->tableName);            $columns = ArrayHelper::getValue($key, 'columns');            $refTable = ArrayHelper::getValue($key, 'refTable');            $name = ArrayHelper::getValue($key, 'name');            if ($name == null) {                $name = $this->generateForeignKeyConstraintName($refTable, $columns);            }            $this->dropForeignKey('fk_' . $name, $table);            $this->dropIndex('idx_' . $name, $table);        }        if ($this->isMultilingual) {            $this->dropTable($this->langTableName);        }        $this->dropTable($this->tableName);    }    /**     * @return mixed     */    public function getBaseTableName()    {        return $this->_baseTableName;    }    /**     * @param mixed $baseTableName     */    public function setBaseTableName($baseTableName)    {        $this->_baseTableName = $baseTableName;    }    /**     * @return mixed     */    public function getLangTableName()    {        return $this->_langTableName;    }    /**     * @param mixed $langTableName     */    public function setLangTableName($langTableName)    {        $this->_langTableName = $langTableName;    }    /**     * @return mixed     */    public function getBaseLangTableName()    {        return $this->_baseLangTableName;    }    /**     * @param mixed $baseLangTableName     */    public function setBaseLangTableName($baseLangTableName)    {        $this->_baseLangTableName = $baseLangTableName;    }    private function addAttribute($attribute, $type)    {        $this->_attributes[$attribute] = $type;    }    /**     * @return array     */    public function getAttributes(): array    {        return $this->_attributes;    }    /**     * @return array     */    public function getLangTableAttributes(): array    {        return $this->_langTableAttributes;    }    /**     * @param array $langTableAttributes     */    public function setLangTableAttributes(array $langTableAttributes)    {        $this->_langTableAttributes = $langTableAttributes;    }    /**     * Generates attributes for multilingual table and remove multilingual attributes from main table attributes     */    private function generateLangTableAttributes()    {        $this->_langTableAttributes['id'] = $this->primaryKey();        $this->_langTableAttributes['owner_id'] = $this->integer();        $this->_langTableAttributes['language'] = $this->string(6);        foreach ($this->multilingiualAttributes as $attribute) {            $type = ArrayHelper::remove($this->_attributes, $attribute);            if ($attribute != null) {                $this->_langTableAttributes[$attribute] = $type;            }        }        $this->foreignKeys[] = [            'name' => $this->baseLangTableName . '_owner_id',            'table' => $this->langTableName,            'columns' => 'owner_id',            'refTable' => $this->tableName,            'delete' => 'CASCADE',            'update' => 'CASCADE',        ];    }}?>