<?phpnamespace soft\db;use common\models\User;use Yii;use Exception;use soft\helpers\ArrayHelper;use yeesoft\multilingual\behaviors\MultilingualBehavior;use yii\base\InvalidArgumentException;use yii\db\ActiveRecord as YiiActiveRecord;/** * @method getTranslations() * @method getMultilingualAttributeLabel(string $attribute) @see MultilingiualBehavior::getMultilingualAttributeLabel() * @method ActiveQuery hasMany($class, array $link) see [[BaseActiveRecord::hasMany()]] for more info * @method ActiveQuery hasOne($class, array $link) see [[BaseActiveRecord::hasOne()]] for more info * * @property-read mixed $translations * @property-read string $firstErrorMessage The first error message * @property-read mixed $statusName [[self::getStatusName()]] * * @property-read null|\yeesoft\multilingual\behaviors\MultilingualBehavior $multilingualBehavior * @property-read bool $hasMultilingualBehavior * @property-read array $multilingualAttributes * @property-read User $deletedBy * @property-read User $createdBy * @property-read User $updatedBy * @property-read \soft\i18n\Formatter|\yii\i18n\Formatter $formatter * @property-read bool $hasMultilingualAttributes */class ActiveRecord extends YiiActiveRecord{    use ActiveRecordTrait;    use MultilingualTrait;    const STATUS_INACTIVE = 0;    const STATUS_ACTIVE = 1;    /**     * @var bool If true, model will be deleted softly. (does not deleted from db)     * Following attributes required to soft delete:     *  - is_deleted - bool     *  - deleted_at - integer     *  - deleted_by - integer     * @see self::softDelete     * @see self::beforeDelete()     */    public $softDelete = false;    //<editor-fold desc="Methods" defaultstate="collapsed">    public static function statuses()    {        return [            self::STATUS_INACTIVE => Yii::t('site', 'Inactive'),            self::STATUS_ACTIVE => Yii::t('site', 'Active'),        ];    }    /**     * Status holatini ko'rsatish     * DIQQAT: buning uchun jadvalda `status` degan maydon bo'lishi zarur     * @return mixed     * @throws \Exception     */    public function getStatusName()    {        return ArrayHelper::getValue(self::statuses(), $this->status);    }    /**     * @inheritDoc     * @throws Exception     */    public function fields()    {        $fields = parent::fields();        if ($this->hasMultilingualBehavior) {            $fields = array_merge($fields, $this->multilingualAttributes);        }        return $fields;    }    //</editor-fold>    //<editor-fold desc="Relations" defaultstate="collapsed">    /**     * Ushbu classdan extend qilingan modellarda `created_by` attributi bo'lsa,     * ushbu methoddan va $createdBy xususiyatidan foydalanish mn.     * @return \yii\db\ActiveQuery|\common\models\query\UserQuery     */    public function getCreatedBy()    {        return $this->hasOne(User::className(), ['id' => 'created_by']);    }    /**     * Ushbu classdan extend qilingan modellarda `deleted_by` attributi bo'lsa,     * ushbu methoddan va $deletedBy xususiyatidan foydalanish mn.     * @return \yii\db\ActiveQuery|\common\models\query\UserQuery     */    public function getDeletedBy()    {        return $this->hasOne(User::className(), ['id' => 'deleted_by']);    }    /**     * Ushbu classdan extend qilingan modellarda `updated_by` attributi bo'lsa,     * ushbu methoddan va $updatedBy xususiyatidan foydalanish mn.     * @return \yii\db\ActiveQuery|\common\models\query\UserQuery     */    public function getUpdatedBy()    {        return $this->hasOne(User::className(), ['id' => 'updated_by']);    }    //</editor-fold>    //<editor-fold desc="Attribute labels" defaultstate="collapsed">    /**     * Attribute labels     * @return array     */    public function labels()    {        return [];    }    public function defaultAttributeLabels()    {        return [            'name' => 'Номи',            'title' => 'Сарлавҳа',            'text' => "Матн",            'description' => "Тавсиф",            'content' => "Контент",            'image' => "Расм",            'phone' => 'Тел. рақам',            'date' => 'Сана',            'status' => "Ҳолат",            'user_id' => "Муаллиф",            'comment' => 'Изоҳ',            'user.username' => "Ким томонидан қўшилди",            'user.fullname' => "Ким томонидан қўшилди",            'created_at' => "Яратилди",            'updated_at' => "Таҳрирланди",            'deleted_at' => "Deleted at",            'updated_by' => "Ким томонидан таҳрирланди",            'updatedBy.username' => "Ким томонидан таҳрирланди",            'deleted_by' => "Deleted by",        ];    }    /**     * @inheritDoc     */    public function attributeLabels()    {        $defaultLabels = $this->defaultAttributeLabels();        $labels = $this->labels();        return array_merge($defaultLabels, $labels);    }    /**     * @param string $attribute     * @return string     * @throws Exception     */    public function getAttributeLabel($attribute)    {        if ($this->hasMultilingualBehavior) {            if ($this->multilingualBehavior->isAttributeMultilingual($attribute)) {                return $this->multilingualBehavior->getMultilingualAttributeLabel($attribute);            }        }        return parent::getAttributeLabel($attribute);    }    //</editor-fold>    //<editor-fold desc="For CRUD actions" defaultstate="collapsed">    /**     * @return string the first error text of the model after validating     * */    public function getFirstErrorMessage()    {        $firstErrors = $this->firstErrors;        if (empty($firstErrors)) {            return null;        }        $array = array_values($firstErrors);        return ArrayHelper::getArrayValue($array, 0, null);    }    /**     * @return bool     */    public function loadPost()    {        return $this->load(Yii::$app->request->post());    }    /**     * @return bool     */    public function loadSave()    {        return $this->load(Yii::$app->request->post()) && $this->save();    }    /**     * @return bool     */    public function loadValidate()    {        return $this->load(Yii::$app->request->post()) && $this->validate();    }    //</editor-fold>    //<editor-fold desc="Multilingual behavior" defaultstate="collapsed">    /**     * languages list for multilingual behavior. For more details refer     *  [[yeesoft/multilingual]] extension     * */    public function languages()    {        return Yii::$app->params['languages'];    }    /**     * @return \yeesoft\multilingual\behaviors\MultilingualBehavior|\yii\base\Behavior|null     */    public function getMultilingualBehavior()    {        return $this->getBehavior('multilingual');    }    /**     * @return bool     */    public function getHasMultilingualBehavior()    {        return $this->multilingualBehavior != null;    }    /**     * @return array     */    public function getMultilingualAttributes()    {        return $this->hasMultilingualBehavior ? $this->multilingualBehavior->attributes : [];    }    /**     * @return bool     */    public function getHasMultilingualAttributes()    {        return !empty($this->multilingualAttributes);    }    /**     * Check if $attribute is multilingual attribute     * @param $attribute     * @return bool     */    public function isMultilingualAttribute($attribute)    {        return in_array($attribute, $this->multilingualAttributes);    }    /**     * Check if $name is attribute     * @param $name     * @return bool     */    public function isAttribute($name)    {        if ($name) {            return parent::hasAttribute($name) || $this->isMultilingualAttribute($name);        } else return false;    }    /**     * Generates multilingual attributes with language prefix by given attribute.     * For instance, if $attribute value is 'name', result would be ['name_uz', 'name_en', ...]     * @param mixed $attribute multilingual attribute     * @return array|false multilingual attributes with language prefix     * @throws \Exception     */    public function generateMultilingualAttributes($attribute)    {        if (!$this->isMultilingualAttribute($attribute)) {            throw new InvalidArgumentException("Attribute '" . $attribute . "' is not multilingual attribute");        }        $result = [];        foreach ($this->languages() as $key => $value) {            $result[] = $attribute . "_" . $key;        }        return $result;    }    //</editor-fold>    //<editor-fold desc="Soft Delete" defaultstate="collapsed">    /**     * @return bool     */    public function beforeDelete()    {        if (!parent::beforeDelete()) {            return false;        }        if ($this->softDelete) {            $this->softDelete();            return false;        }        return true;    }    /**     * Soft delete model.     * Following attributes required to soft delete:     *  - is_deleted - bool     *  - deleted_at - integer     *  - deleted_by - integer     * @see self::softDelete     * @see self::beforeDelete()     */    public function softDelete()    {        $this->is_deleted = true;        $this->deleted_at = time();        $this->deleted_by = Yii::$app->user->getId();        $this->save(false);    }    //</editor-fold>    //<editor-fold desc="Formatter" defaultstate="collapsed">    /**     * @return \soft\i18n\Formatter|\yii\i18n\Formatter     */    public function getFormatter()    {        return Yii::$app->formatter;    }    //</editor-fold>    //<editor-fold desc="Links generators" defaultstate="collapsed">    public function actionLink($label, $url = null, $options = [], $icon = null)    {        return a($label, $url, $options, $icon);    }    public function viewLink($label = '', $url = null, $options = ['data-pjax' => 0], $icon = null)    {        if ($url == null) {            $url = ['view', 'id' => $this->id];        }        return $this->actionLink($label, $url, $options, $icon);    }    //</editor-fold>    //<editor-fold desc="CRUD Actions and Errors" defaultstate="collapsed">    /**     * Adds action error message     * @param $type string action type, forinstance, 'delete', 'update'     * @param $message string Error message     * @see getCrudError     * @see getIsDeletable     * @see getIsUpdatable     */    public function addCrudError($type, $message)    {        $errors = $this->_crudErrors;        $errors[$type] = $message;        $this->_crudErrors = $errors;    }    /**     * Gets action error message     * @param $type string action type, forinstance, 'delete', 'update'     * @param $message string Error message     * @see addCrudError     * @see getIsDeletable     * @see getIsUpdatable     */    public function getCrudError($type, $default = null)    {        if ($default === null) {            $default = 'Сизга бу амални бажаришга рухсат берилмаган';        }        return ArrayHelper::getArrayValue($this->_crudErrors, $type, $default);    }    /**     * Deleting conditions.     * You may override this method in child classes     *     *  ```php     * public function getIsDeletable()     * {     *     if (!$model->user_id != Yii::$app->user->id ) {     *         $model->addCrudError('delete', 'You are not allowed to delete this record!')     *         return false;     *     }     *     *     return true;     * }     * ```     * Then you can check delete conditions before deleting the record,     * forexample, on controller:     *     * ```php     * public function actionDelete($id)     * {     *     *     $model = $this->findModel($id);     *     if(!$model->getIsDeletable()){     *          throw new ForbiddenHttpException($model->getCrudError('delete', 'Some default message'));     *      }     *     $model->delete();     *     return ...;     * }     * ```     *     * @return bool whether the record should be deleted. Defaults to `true`.     */    public function getIsDeletable()    {        return true;    }    /**     * Updating conditions.     * You may override this method in child classes     *     *  ```php     * public function getIsUpdatable()     * {     *     if (!$model->user_id != Yii::$app->user->id ) {     *         $model->addCrudError('update', 'You are not allowed to update this record!')     *         return false;     *     }     *     *     return true;     * }     * ```     * Then you can check delete conditions before deleting the record,     * forexample, on controller:     *     * ```php     * public function actionUpdate($id)     * {     *     *     $model = $this->findModel($id);     *     *     if(!$model->getIsUpdatable()){     *          throw new ForbiddenHttpException($model->getCrudError('update', 'Some default message'));     *      }     *     *     ...     * }     * ```     *     * @return bool whether the record should be updated. Defaults to `true`.     */    public function getIsUpdatable()    {        return true;    }    //</editor-fold>}