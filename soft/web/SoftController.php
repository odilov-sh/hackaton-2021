<?phpnamespace soft\web;use InvalidArgumentException;use soft\helpers\SiteHelper;use Yii;use yii\web\Controller;use soft\helpers\ArrayHelper;use soft\helpers\Url;use yii\web\MethodNotAllowedHttpException;use yii\web\Response;use soft\components\AjaxCrud;/** * * @property-read AjaxCrud|object $ajaxCrud * @property-read bool $methodIsPost * @property-read bool $isAjax */class SoftController extends Controller{    use VCTrait;    private $_ajaxCrud;    public function init()    {        SiteHelper::setLanguage();        parent::init();    }    /**     * @return object|AjaxCrud     * @throws yii\base\InvalidConfigException     */    public function getAjaxCrud()    {        if ($this->_ajaxCrud === null) {            $this->setAjaxCrud([]);        }        return $this->_ajaxCrud;    }    /**     * Sets the ajaxCrud component for this controller     * @param $value     * @throws yii\base\InvalidConfigException     */    public function setAjaxCrud($value)    {        if (is_array($value)) {            $class = ArrayHelper::remove($value, 'class', AjaxCrud::class);            $config = ['class' => $class];            $this->_ajaxCrud = Yii::createObject(array_merge($config, $value));        } elseif ($value instanceof AjaxCrud || $value === false) {            $this->_ajaxCrud = $value;        } else {            throw new InvalidArgumentException('Only AjaxCrud instance, configuration array or false is allowed.');        }    }    # <editor-fold desc="Request" defaultstate="collapsed">    /**     * @return bool     */    public function getIsAjax()    {        return $this->request->isAjax;    }    /**     * @param null $name     * @param null $defaultValue     * @return array|mixed     */    public function post($name = null, $defaultValue = null)    {        return $this->request->post($name, $defaultValue);    }    # </editor-fold>    # <editor-fold defaultstate="collapsed" desc="Response">    /**     * Response formatini json formatiga o'tkazish     */    public function formatJson()    {        $this->response->format = Response::FORMAT_JSON;    }    /**     * Response formatini json formatiga o'tkazish     * @param bool $checkIfAjax json formatiga o'tkazishdan avval requestning ajax ekanligini tekshirish,     *  agar false bo'lsa, tekshirmasdan json formatiga o'tkazadi     */    public function ajaxResponse($checkIfAjax = true)    {        if ($checkIfAjax){            if ($this->isAjax){                $this->formatJson();            }        }        else{            $this->formatJson();        }    }// </editor-fold>    public function back()    {        return $this->redirect($this->request->referrer);	}    /**     * check if request method is post     * @return bool     */    public function getMethodIsPost()    {        return Yii::$app->getRequest()->getMethod() == 'POST';    }    /**     * @return bool     * @throws MethodNotAllowedHttpException     */    public function checkIfRequestMethodIsPost()    {        if (!$this->methodIsPost) {            throw new MethodNotAllowedHttpException('Method Not Allowed. This URL can only handle the POST request methods');        }        return true;    }}	