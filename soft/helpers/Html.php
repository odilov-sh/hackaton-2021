<?phpnamespace soft\helpers;use Yii;class Html extends \yii\helpers\Html{    /**     * Generates a tag with icon     * if $options[visible] == false return ""     * @param string $text     * @param string|array $url     * @param array $options     * @param null|string $icon     * @return string     */    public static function a($text, $url = null, $options = [], $icon = null)    {        if (isset($options['visible'])) {            if (!$options['visible']) {                return "";            }            unset($options['visible']);        }        $text = static::withIcon($text, $icon);        return parent::a($text, $url, $options);    }    /**     * Generates icon     * @param null|string|array $icon - Ikonka nomi,     *  agar array shaklida berilsa, Html::tag() methodi orqali generatsiya qilinadi     *  agar ikonkaning nomi o'zi berilsa, fa fa-icon generatsiya qilinadi,     *  yoki `user,fas` , `user,gly` (bs3 glyphicon) ko'rinishda berilsa, mos ravishda verguldan keyingi ikonka classiga qarab generatsiya qiladi     * @param array $options     * @return string     */    public static function icon($icon = null, $options=[])    {        if (empty($icon)) {            return "";        }        if (is_array($icon)){            $tag = ArrayHelper::remove($icon, 'tag', 'i');            return Html::tag($tag, '', $icon);        }        $icon = explode(",", $icon);        if (count($icon) > 1) {            $iconClass = $icon[1];            switch ($iconClass){                case "gly" : $class = 'glyphicon glyphicon-' . $icon[0]; break;                case "fas" : $class = 'fas fa-' . $icon[0]; break;                case "far" : $class = 'far fa-' . $icon[0]; break;                case "fab" : $class = 'fab fa-' . $icon[0]; break;                case "feather" : $class = 'feather icon-' . $icon[0]; break;                default:  $class = "{$iconClass} {$iconClass}-{$icon[0]}"; break;            }        }        else {            $class = 'fa fa-' . $icon[0];        }        Html::addCssClass($options, $class);        return Html::tag('i', '', $options);    }    /**     * Generates text with icon     * @param null|string $text     * @param null|string|array $icon     * @param array $options     * @return string|null     */    public static function withIcon($text = null, $icon = null, $options=[])    {        if ($icon == null) {            return $text;        }        return static::icon($icon, $options) . " " . $text;    }    /**     * Generates badge     * @param string|null $badgeText     * @return string     */    public static function badge($badgeText = null)    {        if ($badgeText === null) {            return "";        } else {            return parent::tag('span', $badgeText, ['class' => 'badge']);        }    }    /**     * Generates text with  badge     * @param null|string $label     * @param string $badgeText     * @return string     */    public static function withBadge($label = null, $badgeText = '')    {        $badge = static::badge($badgeText);        return $badge . " " . $label;    }    /**     * @param null $content     * @param array $options     * @return string     * @throws \Exception     */    public static function submitButton($content = null, $options = [])    {        if (isset($options['visible'])){            if (!$options['visible']){                return "";            }            unset($options['visible']);        }        $content = $content == null ? Yii::t('site', 'Save') : $content;        if (!isset($options['class'])){            $options['class'] = 'btn btn-success';        }        return parent::submitButton($content, $options);    }}